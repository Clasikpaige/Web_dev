[
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": "# Module 3: HTML5 and CSS3 Deep Dive\n\nWelcome to Module 3. Today we delve deeper into the very foundation of web interfaces: HTML5 and CSS3. These two technologies are the core of every website, and while many view them as mere markup and design tools, their depth and evolution over the past decade have transformed them into rich, powerful languages worthy of serious engineering study.\n\n## HTML5 Semantics & Structure\nHTML5 is more than just tags for structure — it’s about meaning. Semantic elements like `<header>`, `<article>`, `<section>`, and `<nav>` improve accessibility, SEO, and maintainability. We’ll walk through what each element is intended for and how it helps both machines and humans understand your site structure. You will also learn:\n\n- The Document Object Model (DOM)\n- Best practices for organizing clean, semantic HTML\n- Accessibility compliance (WCAG basics)\n\nWe’ll build a full HTML document from scratch, using modern conventions and responsive structure — from the `<!DOCTYPE html>` declaration to advanced form inputs and validation.\n\n## CSS3 Styling & Layouts\nCSS has gone far beyond simple styling. With the rise of responsive design, CSS now includes advanced features like:\n\n- Flexbox\n- CSS Grid\n- Media Queries\n- Pseudo-elements and pseudo-classes\n- Animations and transitions\n\nWe’ll cover the box model, specificity rules, inheritance, and layout engines. We’ll examine real-world layouts like card systems, split layouts, and CSS-only UI components.\n\n## Practical: Building a Responsive Blog Page\nYou will build a full responsive blog layout including:\n\n- Header navigation with dropdown\n- Responsive content grid using CSS Grid\n- Footer with semantic contact information\n\nThis task enforces mastery of Flexbox and Grid systems, media queries, and semantic HTML5 structure.\n\n## Wrap-Up\nBy the end of this module, you should be able to structure any modern web interface with semantic HTML and style it responsively using modern CSS. These are core fundamentals for any web engineer, and you’ll be using them consistently in every project going forward.\n\n---"
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": "# Module 4: JavaScript Essentials and the Browser Environment\n\nJavaScript is the engine of interactivity in the web. This module focuses not on frameworks, but on the real language underneath — from syntax and scope to the runtime environment of browsers.\n\n## JavaScript as an Engineering Language\nWe explore JavaScript’s:\n\n- Variable scoping (`var`, `let`, `const`)\n- Functions and closures\n- Prototype inheritance model\n- ES6+ features (arrow functions, destructuring, modules)\n\nThen we’ll shift into the **browser runtime**:\n\n- The Window and Document objects\n- DOM manipulation\n- Event bubbling and delegation\n- The JavaScript event loop\n- Timers: `setTimeout`, `setInterval`, and requestAnimationFrame\n\n## Debugging and Developer Tools\nYou will learn to use browser developer tools to inspect the DOM, debug JS code in real time, monitor network traffic, and simulate device conditions. This is a critical engineering skill for diagnosing layout shifts, race conditions, and rendering bottlenecks.\n\n## Practical: Creating an Interactive To-Do List\nA simple but powerful exercise, we’ll build a fully client-side JavaScript app:\n\n- Create tasks\n- Mark them as completed\n- Delete them\n- Store them using `localStorage`\n\nThis project covers event handling, DOM manipulation, and working with user data.\n\n## Wrap-Up\nYou will leave this module with a solid engineering grasp of how JavaScript interacts with the browser — forming the basis for later work in front-end frameworks and API-driven dynamic web pages.\n\n---"
  },
  {
    "cell_type": "markdown",
    "metadata": {},
    "source": "# Module 5: Git, GitHub, and Collaborative Development\n\nIn this module, we step outside of coding and into the engineering pipeline of version control and team collaboration. Git is the backbone of nearly every serious development workflow today, and GitHub is its most widely-used platform.\n\n## Why Git Matters\nGit is not just for backing up your code. It allows you to:\n\n- Track every change and rollback if needed\n- Experiment safely in branches\n- Merge code from multiple contributors\n- Write reproducible, auditable history\n\nWe’ll walk through:\n- The Git three-stage model: Working Directory, Staging Area, Repository\n- Commands: `git init`, `git status`, `git add`, `git commit`, `git diff`, `git log`\n- Branching, merging, and conflict resolution\n- Remote workflows with `git push`, `pull`, and `clone`\n\n## GitHub as a Collaboration Platform\nGitHub adds features for collaboration, issue tracking, pull requests, and more. You’ll learn how to:\n\n- Create and clone repos\n- Create branches and pull requests\n- Use Issues and Projects for agile workflows\n- Write useful commit messages and PR descriptions\n\n## Practical: Team Code Collaboration\nWe’ll simulate a real engineering team:\n\n- Create a repo\n- Clone it locally\n- Work on separate branches\n- Merge work together via pull requests\n\nYou’ll learn conflict resolution in practice — a key part of being a real-world developer.\n\n## Wrap-Up\nBy the end of this module, Git and GitHub should feel like natural extensions of your workflow. Every serious software team relies on Git — and now, you can too.\n\n---"
  }
]
